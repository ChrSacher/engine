Hallo und Recht herzlich Willkommen meine Damen und Herren :P


Ich möchte hier nur einen kleinen Leitfaden zum Einstieg mit git
geben, damit wir sinnvoll zusammen arbeiten können und uns nicht
ständig unseren Quellcode gegenseitig zunichte machen / uns 
prinzipiell in die Quere kommen.

================================================================

1. Was macht git?

Git an sich versioniert unsere Dateien die wir haben, das muss
kein Quellcode sein, sondern jede Datei.
Es macht Sinn unsere Planungen in UML auch zu verisonieren.
Das alles wir in einem "repository" gespeichert, also wie ein
Projekt.

Um den Prozess zu vereinfachen/praktischer zu machen gibt 
es in git Branches. Das sind einfach Entwicklungspfade.

Als Beispiel:
  Man weiß nicht so genau ob eine Idee die man hat funktioniert,
  man möchte aber auch nicht das schon funktionierende
  "verpesten". Gut wäre also, eine Kopie von dem existierenden
  zu erstellen, in dieser Kopie die Idee auszuprobieren
  und je nach Erfolg diese Idee dann in das existierende 
  Integrieren oder sie zu verwerfen.
  
Um das zu erreichen erstellt man ein neuen Branch im repository
und bastelt vor sich hin. Die anderen Entwickler können dann
ungestört davon weiter programmieren was sie gerade wollen.


================================================================

2. Mit Git arbeiten

  Das wurde hier eigentlich sehr schön erklärt.
  http://rogerdudler.github.io/git-guide/index.de.html
  http://rogerdudler.github.io/git-guide/files/git_cheat_sheet.pdf
  
================================================================

3. Projektstrukturierung

Ich habe da gewisse Vorstellungen, ihr dürft da gerne Änderungen
und so mit einbringen, wir müssen uns halt nur auf eine
EINHEITLICHE Projektstruktur und Entwickelmethode einigen.

  i. Wir Versionieren unsere Engine
    --> Immer eine gewisse Anzahl an nächsten Features sammeln
      und dann ein Branch dafür machen.
    --> Überblick über den Projektfortschritt.
    --> Vorher Planbar wann man welche Version haben möchte
    --> Ich denke es macht die Sachen einfacher für uns und
      man hat mehr Erfolgserlebnisse, weil man wieder ne neue
      Version hat ;)
    --> Jede Version bildet ein Branch, der sobald die Verison
    fertig ist nicht mehr weiter entwickelt wird.
    
    Branchbenennung: version_<Number>
      
      
  ii. Aktuellste Entwicklungsversion ist master-Branch
    --> Darauf wird NICHT DIREKT PROGRAMMIERT!!!
    --> Grund seht ihr in der Anleitung zu git.
    
  iii. Jeder macht lokal branches für seine aktuelle Entwicklung
    --> wir kommen uns nicht in die Quere 
    --> Sobald Feature fertig ist wird es auf den Master gebrancht
    --> man kann einfacher mal was ausprobieren
    --> möchte man das den anderen zeigen was man ausprobiert hat
      kann man den Branch hochladen, die andern ziehen ihn sich
      und schauen da mal rein
      
      Branchbenennung: experimental_<sinnvollerName>
      
  iv. Jedes Modul bekommt ein Ordner
    --> Übersichtlich
    --> Module sind Math, System, Gfx, Physix
      brauchen wir mehr?
      
  v. Usecases als kleine Anwendungsfälle unserer Engine erstellen
    Wieder einfach ein Branch erstellen, dann kann man von da aus
    eine kleine Anwendung basteln die halt die Features schon mal
    zeigen soll.
    Branchbenennung: usecase_<sinnvollerName>
    
  vi. UML-Planung immer mit integrieren und hochladen, um auch zu
  sehen was man sich dabei gedacht hat. Die Planung ist wichtig,
  weil der Prof. sie haben will!
  
  vii. Sonst noch was? Was euch dazu einfällt.
